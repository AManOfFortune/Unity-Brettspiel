//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSettings/CameraControlActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControlActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControlActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControlActions"",
    ""maps"": [
        {
            ""name"": ""CameraMovement"",
            ""id"": ""e30fb7d0-1de9-4cb5-a577-67749545d3e7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b9e35604-8823-4cf3-9f16-cb0f2bfafdb6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b77dc5b2-57a1-432e-b7c8-6e2b6d21a973"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6171f3b3-d732-4200-b6b8-4c7e37d7b5a5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f58227c2-3696-48f5-a715-2c1954a645b5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6f4bd2fb-d229-44f7-a91a-cc5409cf1daf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""92dddf5f-13c9-4062-88da-2334043badbf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CameraSwapping"",
            ""id"": ""33d62ca2-ce7c-4eae-bd11-482a6465a883"",
            ""actions"": [
                {
                    ""name"": ""Swap"",
                    ""type"": ""Button"",
                    ""id"": ""574012b1-1204-4325-b60c-d49ae6d6fe60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6345dcc9-daca-4ea0-a6e1-4be89f76cc4d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraZooming"",
            ""id"": ""0570a7d2-b332-4c78-97a1-09448a4fe9ac"",
            ""actions"": [
                {
                    ""name"": ""ZoomMouse"",
                    ""type"": ""Value"",
                    ""id"": ""8a3395fc-1c32-4923-b5a0-ed6552e8fde1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""1c3d1d34-b427-49d5-91bf-4e319facf349"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29b94951-9e9b-4d0c-8890-c609ec0e9bd4"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4ebc2a6a-b35d-494c-8c66-3f5e1911ba77"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d30ddf95-8434-4efd-afa4-b2cd331a6153"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9a158f02-8790-46be-9a66-e24248d14d3e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CameraRotation"",
            ""id"": ""7c35bf4e-b28c-401c-bf65-7a1d06a44006"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6694ed94-06ab-4ea3-ad39-77c87e11735b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""4bc5deca-6f97-467b-9490-2e506345da9c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51739957-dacb-4bbd-8b8e-0ec4295da97d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6143212f-be2a-4c2a-a124-78bdf1c5e316"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraMovement
        m_CameraMovement = asset.FindActionMap("CameraMovement", throwIfNotFound: true);
        m_CameraMovement_Movement = m_CameraMovement.FindAction("Movement", throwIfNotFound: true);
        // CameraSwapping
        m_CameraSwapping = asset.FindActionMap("CameraSwapping", throwIfNotFound: true);
        m_CameraSwapping_Swap = m_CameraSwapping.FindAction("Swap", throwIfNotFound: true);
        // CameraZooming
        m_CameraZooming = asset.FindActionMap("CameraZooming", throwIfNotFound: true);
        m_CameraZooming_ZoomMouse = m_CameraZooming.FindAction("ZoomMouse", throwIfNotFound: true);
        m_CameraZooming_ZoomKeyboard = m_CameraZooming.FindAction("ZoomKeyboard", throwIfNotFound: true);
        // CameraRotation
        m_CameraRotation = asset.FindActionMap("CameraRotation", throwIfNotFound: true);
        m_CameraRotation_Newaction = m_CameraRotation.FindAction("New action", throwIfNotFound: true);
        m_CameraRotation_Rotate = m_CameraRotation.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraMovement
    private readonly InputActionMap m_CameraMovement;
    private ICameraMovementActions m_CameraMovementActionsCallbackInterface;
    private readonly InputAction m_CameraMovement_Movement;
    public struct CameraMovementActions
    {
        private @CameraControlActions m_Wrapper;
        public CameraMovementActions(@CameraControlActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CameraMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_CameraMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMovementActions set) { return set.Get(); }
        public void SetCallbacks(ICameraMovementActions instance)
        {
            if (m_Wrapper.m_CameraMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_CameraMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public CameraMovementActions @CameraMovement => new CameraMovementActions(this);

    // CameraSwapping
    private readonly InputActionMap m_CameraSwapping;
    private ICameraSwappingActions m_CameraSwappingActionsCallbackInterface;
    private readonly InputAction m_CameraSwapping_Swap;
    public struct CameraSwappingActions
    {
        private @CameraControlActions m_Wrapper;
        public CameraSwappingActions(@CameraControlActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swap => m_Wrapper.m_CameraSwapping_Swap;
        public InputActionMap Get() { return m_Wrapper.m_CameraSwapping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraSwappingActions set) { return set.Get(); }
        public void SetCallbacks(ICameraSwappingActions instance)
        {
            if (m_Wrapper.m_CameraSwappingActionsCallbackInterface != null)
            {
                @Swap.started -= m_Wrapper.m_CameraSwappingActionsCallbackInterface.OnSwap;
                @Swap.performed -= m_Wrapper.m_CameraSwappingActionsCallbackInterface.OnSwap;
                @Swap.canceled -= m_Wrapper.m_CameraSwappingActionsCallbackInterface.OnSwap;
            }
            m_Wrapper.m_CameraSwappingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Swap.started += instance.OnSwap;
                @Swap.performed += instance.OnSwap;
                @Swap.canceled += instance.OnSwap;
            }
        }
    }
    public CameraSwappingActions @CameraSwapping => new CameraSwappingActions(this);

    // CameraZooming
    private readonly InputActionMap m_CameraZooming;
    private ICameraZoomingActions m_CameraZoomingActionsCallbackInterface;
    private readonly InputAction m_CameraZooming_ZoomMouse;
    private readonly InputAction m_CameraZooming_ZoomKeyboard;
    public struct CameraZoomingActions
    {
        private @CameraControlActions m_Wrapper;
        public CameraZoomingActions(@CameraControlActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomMouse => m_Wrapper.m_CameraZooming_ZoomMouse;
        public InputAction @ZoomKeyboard => m_Wrapper.m_CameraZooming_ZoomKeyboard;
        public InputActionMap Get() { return m_Wrapper.m_CameraZooming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraZoomingActions set) { return set.Get(); }
        public void SetCallbacks(ICameraZoomingActions instance)
        {
            if (m_Wrapper.m_CameraZoomingActionsCallbackInterface != null)
            {
                @ZoomMouse.started -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoomMouse;
                @ZoomMouse.performed -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoomMouse;
                @ZoomMouse.canceled -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoomMouse;
                @ZoomKeyboard.started -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoomKeyboard;
                @ZoomKeyboard.performed -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoomKeyboard;
                @ZoomKeyboard.canceled -= m_Wrapper.m_CameraZoomingActionsCallbackInterface.OnZoomKeyboard;
            }
            m_Wrapper.m_CameraZoomingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ZoomMouse.started += instance.OnZoomMouse;
                @ZoomMouse.performed += instance.OnZoomMouse;
                @ZoomMouse.canceled += instance.OnZoomMouse;
                @ZoomKeyboard.started += instance.OnZoomKeyboard;
                @ZoomKeyboard.performed += instance.OnZoomKeyboard;
                @ZoomKeyboard.canceled += instance.OnZoomKeyboard;
            }
        }
    }
    public CameraZoomingActions @CameraZooming => new CameraZoomingActions(this);

    // CameraRotation
    private readonly InputActionMap m_CameraRotation;
    private ICameraRotationActions m_CameraRotationActionsCallbackInterface;
    private readonly InputAction m_CameraRotation_Newaction;
    private readonly InputAction m_CameraRotation_Rotate;
    public struct CameraRotationActions
    {
        private @CameraControlActions m_Wrapper;
        public CameraRotationActions(@CameraControlActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_CameraRotation_Newaction;
        public InputAction @Rotate => m_Wrapper.m_CameraRotation_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_CameraRotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraRotationActions set) { return set.Get(); }
        public void SetCallbacks(ICameraRotationActions instance)
        {
            if (m_Wrapper.m_CameraRotationActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnNewaction;
                @Rotate.started -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_CameraRotationActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_CameraRotationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public CameraRotationActions @CameraRotation => new CameraRotationActions(this);
    public interface ICameraMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface ICameraSwappingActions
    {
        void OnSwap(InputAction.CallbackContext context);
    }
    public interface ICameraZoomingActions
    {
        void OnZoomMouse(InputAction.CallbackContext context);
        void OnZoomKeyboard(InputAction.CallbackContext context);
    }
    public interface ICameraRotationActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
}
